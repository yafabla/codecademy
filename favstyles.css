favstyles.css

.btc {
  background-color: #2176FF;
  border-radius: 2px;
  color: #ffffff;
  font-family: 'Raleway',sans-serif;
  font-size: 16px;
  font-weight: 400;
  padding: 14px;
  text-decoration: none;
  text-transform: uppercase;
  cursor: pointer;
}
.btn:hover {
  background-color: #fff;
  color: #2176FF;
  transition: color .1s ease-in, background-color 1s ease-in;
}
 
.btn:active {
  font-size: 18px;
  transition: font-size 1s ease-in-out;
}
/* BREADCRUMB DEAL!!! */
.breadcrumb {
    text-align: left;
  }
  .breadcrumb li {
    float:left;
  }
  
  .breadcrumb a {
    color: #fff;
    background: darkcyan;
    text-decoration: none;
    position: relative;
    height: 30px;
    line-height: 30px;
    text-align: center;
    margin-right: 15px;
    padding: 0 5px;
  }
  .breadcrumb a::before,
  .breadcrumb a::after {
    content: "";
    position: absolute;
    border-color: darkcyan;
    border-style: solid;
    border-width: 15px 5px;
  }
  .breadcrumb a::before {
    left: -10px;
    border-left-color: transparent;
  }
  .breadcrumb a::after {
    left: 100%;
    border-color: transparent;
    border-left-color: darkcyan;
  }
  .breadcrumb a:hover {
    background-color: blue;
  }
  .breadcrumb a:hover::before {
    border-color: blue;
    border-left-color: transparent;
  }
  .breadcrumb a:hover::after {
    border-left-color: blue;
  }
  
  /* This breadcrumb doesn't allow for first mark to occur (li+li) */
  .breadcrumb li+li::before {
    content: "->";
    padding: 5px;
  }

  /* breadcrumb lesson: https://www.codecademy.com/paths/full-stack-engineer-career-path/tracks/fscp-22-improved-styling-with-css/modules/wdcp-22-learn-secondary-navigation/projects/ui-breadcrumb-proj */

  /* flexbox options - flex-basis, flex-grow, flex-shrink https://www.codecademy.com/learn/paths/full-stack-engineer-career-path/tracks/fscp-22-making-a-website-responsive/modules/wdcp-22-layout-with-flexbox/cheatsheet */
  /* display: flex;
  justify-content: flex-end;
                  : flex-start;
                  : center;
                  : space-around;
                  : space-between; 
Review: Flexbox
You should be proud of yourself! You have learned the most important properties of flexbox. Flexbox is an art and a science; you can use it to make laying out multiple elements a piece of cake. You know everything necessary to begin using it in your own projects.

display: flex changes an element to a block-level container with flex items inside of it.
display: inline-flex allows multiple flex containers to appear inline with each other.
justify-content is used to space items along the main axis.
align-items is used to space items along the cross axis.
flex-grow is used to specify how much space (and in what proportions) flex items absorb along the main axis.
flex-shrink is used to specify how much flex items shrink and in what proportions along the main axis.
flex-basis is used to specify the initial size of an element styled with flex-grow and/or flex-shrink.
flex is used to specify flex-grow, flex-shrink, and flex-basis in one declaration.
flex-wrap specifies that elements should shift along the cross axis if the flex container is not large enough.
align-content is used to space rows along the cross axis.
flex-direction is used to specify the main and cross axes.
flex-flow is used to specify flex-wrap and flex-direction in one declaration.
Flex containers can be nested inside of each other by declaring display: flex or display: inline-flex for children of flex containers.*/
/* end flexbox */